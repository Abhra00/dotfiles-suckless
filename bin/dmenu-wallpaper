#!/usr/bin/env bash

# Variables
wall_dir="$HOME/walls"
cache_dir="$HOME/.cache/wallcache"
dmenu_cmd="dmenu"

# Create cache dir if it don't exist
if [[ ! -d "$cache_dir" ]]; then
    mkdir "$cache_dir"
fi

# Generate .png thumbnails regardless of original format
generate_thumbnail() {
    local img="$1"
    local filename="$(basename "$img")"
    local base="${filename%.*}"
    local thumb="${cache_dir}/${base}.png"
    local hash_file="${cache_dir}/.${base}.md5"

    local current_hash
    current_hash=$(xxh64sum "$img" | cut -d' ' -f1)

    if [[ ! -f "$thumb" || ! -f "$hash_file" || "$current_hash" != "$(cat "$hash_file" 2>/dev/null)" ]]; then
        magick "$img" -resize 300x300^ -gravity center -extent 300x300 "$thumb"
        echo "$current_hash" > "$hash_file"
    fi
}

export -f generate_thumbnail
export cache_dir

# Generate thumbnails in parallel
find "$wall_dir" -type f \( -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.png' -o -iname '*.webp' \) -print0 \
  | xargs -0 -P 4 -I {} bash -c 'generate_thumbnail "{}"'

# Build list for dmenu
declare -A path_map
preview_list=""

while IFS= read -r img; do
    base="$(basename "$img")"
    name="${base%.*}"
    thumb="$cache_dir/${name}.png"
    if [[ -f "$thumb" ]]; then
        preview_list+=$'PNG_IMAGE:'"$thumb"$'\n'
        path_map["$thumb"]="$img"
    fi
done < <(find "$wall_dir" -type f \( -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.png' -o -iname '*.webp' \) | sort)

# Run dmenu with image previews
selected_thumb=$(printf "%s" "$preview_list" \
  | "$dmenu_cmd" -c -i -ip 'PNG_IMAGE:' -p 'Choose wallpaper:' -l 10 -is 300)

# Exit if nothing selected
[[ -z "$selected_thumb" ]] && exit 0

# Remove PNG_IMAGE prefix
selected_thumb="${selected_thumb#PNG_IMAGE:}"

# Look up original path
final_path="${path_map["$selected_thumb"]}"

# Check
[[ -z "$final_path" ]] && {
    notify-send "❌ Could not resolve original path for: $selected_thumb"
    exit 1
}

# Set wallpaper
setbg "$final_path"

